function [trX, trY, trZ] =  afmSetTetrhedra()
% void SetTetrahedra( float** trX, float** trY, float** trZ )
% {

% 	float trXF[8][3] = { {0,0,1},{0, 0, -1},{0,0,1},{0,0,-1},{0,0,1},{0, 0, -1},{0,0,1},{0,0,-1} };
% 	float trYF[8][3] = {{1,0,0},{1,0,0},{1,0,0},{1,0,0},{-1,0,0},{-1,0,0},{-1,0,0},{-1,0,0} };
% 	float trZF[8][3] = {{0,1,0},{0,1,0},{0,-1,0},{0,-1,0},{0,1,0},{0,1,0},{0,-1,0},{0,-1,0}};
% 	float a[3], b[3], c[3], dir1, temp;
% 	for(int k=0;k<8;k++)
% 	{
% 		a[0] = -1*trXF[k][0];
% 		a[1] = -1*trYF[k][0];
% 		a[2] = -1*trZF[k][0];
      
% 		b[0] = -1*trXF[k][1];
% 		b[1] = -1*trYF[k][1];
% 		b[2] = -1*trZF[k][1];
      
% 		c[0] = -1*trXF[k][2];
% 		c[1] = -1*trYF[k][2];
% 		c[2] = -1*trZF[k][2];

% 		dir1 = c[0]*(a[1]*b[2] - a[2]*b[1]) - c[1]*(a[0]*b[2]-a[2]*b[0]) + c[2]*(a[0]*b[1]-a[1]*b[0]);
% 		if(dir1>0)
% 		{
% 			temp = a[0];
% 			a[0] = b[0];
% 			b[0] = temp;
% 			temp = a[1];
% 			a[1] = b[1];
% 			b[1] = temp;
% 			temp = a[2];
% 			a[2] = b[2];
% 			b[2] = temp;
% 			trX[k][0] = -a[0];
% 			trY[k][0] = -a[1];
% 			trZ[k][0] = -a[2];
% 			trX[k][1] = -b[0];
% 			trY[k][1] = -b[1];
% 			trZ[k][1] = -b[2];
% 			trX[k][2] = -c[0];
% 			trY[k][2] = -c[1];
% 			trZ[k][2] = -c[2];

% 		}
% 		else
% 		{
% 			trX[k][0] = -a[0];
% 			trY[k][0] = -a[1];
% 			trZ[k][0] = -a[2];
% 			trX[k][1] = -b[0];
% 			trY[k][1] = -b[1];
% 			trZ[k][1] = -b[2];
% 			trX[k][2] = -c[0];
% 			trY[k][2] = -c[1];
% 			trZ[k][2] = -c[2];
% 		}

% 	}
% }

	    trXF = zeros([8, 3]);
	    trXF = [ [0,0,1];[0, 0, -1];[0,0,1];[0,0,-1];[0,0,1];[0, 0, -1];[0,0,1];[0,0,-1] ];
	    trYF = zeros([8, 3]);
		trYF = [[1,0,0];[1,0,0];[1,0,0];[1,0,0];[-1,0,0];[-1,0,0];[-1,0,0];[-1,0,0] ];
		trZF = zeros([8, 3]);
	    trZF = [[0,1,0];[0,1,0];[0,-1,0];[0,-1,0];[0,1,0];[0,1,0];[0,-1,0];[0,-1,0]];
		% float a[3], b[3], c[3], dir1, temp;
	    trX = zeros([8, 3]); trY = zeros([8, 3]); trZ = zeros([8, 3]);
	for k = 1 : 8	
			a(1) = -1*trXF(k,1);
			a(2) = -1*trYF(k,1);
			a(3) = -1*trZF(k,1);
	      
			b(1) = -1*trXF(k,2);
			b(2) = -1*trYF(k,2);
			b(3) = -1*trZF(k,2);
	      
			c(1) = -1*trXF(k,3);
			c(2) = -1*trYF(k,3);
			c(3) = -1*trZF(k,3);

			dir1 = c(1)*(a(2)*b(3) - a(3)*b(2)) - c(2)*(a(1)*b(3)-a(3)*b(1)) + c(3)*(a(1)*b(2)-a(2)*b(1));
	        if (dir1 > 0)
	            temp = a(1);
				a(1) = b(1);
				b(1) = temp;
				temp = a(2);
				a(2) = b(2);
				b(2) = temp;
				temp = a(3);
				a(3) = b(3);
				b(3) = temp;
				trX(k,1) = -a(1);
				trY(k,1) = -a(2);
				trZ(k,1) = -a(3);
				trX(k,2) = -b(1);
				trY(k,2) = -b(2);
				trZ(k,2) = -b(3);
				trX(k,3) = -c(1);
				trY(k,3) = -c(2);
				trZ(k,3) = -c(3);
	        else
	            trX(k,1) = -a(1);
				trY(k,1) = -a(2);
				trZ(k,1) = -a(3);
				trX(k,2) = -b(1);
				trY(k,2) = -b(2);
				trZ(k,2) = -b(3);
				trX(k,3) = -c(1);
				trY(k,3) = -c(2);
				trZ(k,3) = -c(3);
	        end
	end
end